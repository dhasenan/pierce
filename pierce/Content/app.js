var user;

var bodyLayout;

var domain = {
  // raw feeds (none of the tag-aggregated feeds)
  realFeeds: [],

  labels: [],

  /********* Read-only properties. ***********/
  getSubscription: function(feedId) {
    if (!user.Subscriptions) return;
    for (var i = 0; i < user.Subscriptions.length; i++) {
      if (user.Subscriptions[i].FeedId == feedId) {
        return user.Subscriptions[i];
      }
    }
    return null;
  },

  getFeed: function(feedId) {
    for (var i = 0; i < domain.feeds.length; i++) {
      if (domain.feeds[i].Id == feedId) {
        return domain.feeds[i];
      }
    }
    return null;
  },

  getArticle: function(feed, artId) {
    for (var i = 0; i < feed.Articles.length; i++) {
      if (feed.Articles[i].Id == artId) {
        return feed.Articles[i];
      }
    }
    return null;
  },

  unreadCount: function(feed) {
    var articles = feed.Articles;
    var unread = 0;
    for (var i = 0; i < articles.length; i++) {
      if (!articles[i].IsRead) {
        unread++;
      }
    }
    return unread;
  },

  /********* Constructive properties. ***************/
  buildLabels: function() {
    var lab = {};
    $.each(domain.feeds, function(i, feed) {
      $.each(feed.Labels, function(j, name) {
        var e = lab[name];
        if (e) {
          e.Feeds.push(feed);
        } else {
          lab[name] = {
            Name: name,
            Feeds: [feed]
          };
        }
      })
    });
  },

  buildCombinedFeed: function(name, feeds) {
    var combined = [];
    for (var i = 0; i < feeds.length; i++) {
      combined = combined.concat(feeds[i].Articles);
    }
    util.sortArticles(combined);
    return {
      Title: name,
      Id: 'special_' + name.replace(/[^a-zA-Z_]/, ''),
      ImageUri: null,
      Articles: combined,
      Autogenerated: true,
      ChildFeeds: feeds
    };
  },

  /*********** Updating, or munging input. *************/
  mungeFeed: function(feed) {
    feed.LastRead = util.jsDate(feed.LastRead);
    feed.NextRead = util.jsDate(feed.NextRead);
    feed.ReadInterval = feed.ReadInterval.TotalSeconds;
    feed.Autogenerated = false;
    var sub = domain.getSubscription(feed.Id);
    if (!sub) {
      console.log('feed ' + feed.Id + ' has no subscription');
      return;
    }
    if (sub.Title) {
      feed.Title = sub.Title;
    }
    $.each(feed.Articles, function(i, art) {
      art.Feed = feed;
      art.PublishDate = util.jsDate(art.PublishDate);
      if (sub) {
        art.IsRead = sub.ReadArticles.indexOf(art.Id) >= 0;
      }
    });
    util.sortArticles(feed.Articles);
    ui.updateTitle();
  },

  refreshUser: function() {
    $.ajax('/Users/Get', {
      dataType: 'json',
      success: function(data, statusText, xhr) {
        user = data;
        for (var i = 0; i < user.Subscriptions.length; i++) {
          var sub = user.Subscriptions[i];
          sub.CheckInterval = sub.CheckInterval.TotalSeconds;
        }
        ui.updateUserInfos();
        domain.refreshFeeds();
      },
      error: function() {
        ui.showLoginWindow();
      }
    });
  },

  refreshFeeds: function() {
    $.ajax('/Feeds/All', {
      dataType: 'json',
      success: function(data, statusText, xhr) {
        domain.realFeeds = data;
        $.each(domain.realFeeds, function(i, feed) {
          domain.mungeFeed(feed);
        });
        domain.reloadFeedInfo();
      }
    });
  },

  reloadFeedInfo: function() {
    var all = domain.buildCombinedFeed('All', domain.realFeeds);
    domain.feeds = [].concat(domain.realFeeds);
    util.sortFeeds();
    domain.feeds.splice(0, 0, all);
    ui.displayFeeds();
    if (ui.currentFeed) {
      // TODO make this not rescroll
      ui.showFeed(ui.currentFeed);
    }
  },

  /********* Modifying data ************/
  updateFeed: function(feed) {
    domain.mungeFeed(feed);
    var existing = domain.realFeeds.indexOf(feed.Id);
    if (existing >= 0) {
      domain.realFeeds[existing] = feed;
    } else {
      domain.realFeeds.push(feed);
    }
    domain.reloadFeedInfo();
  },

  removeFeed: function(feedId) {
    var feed = domain.getFeed(feedId);
    if (feed == null) return;
    if (feed.Autogenerated) return;
    realFeeds.splice(realFeeds.indexOf(feed), 1);
  },

  addFeed: function() {
    $.ajax('/Feeds/Add', {
      dataType: 'json',
      data: { url: $('#addFeedUrl').val() },
      success: function(data, statusText, xhr) {
        if (!data['FoundFeeds']) {
          // leave window open for corrections
          alert('I didn\'t find any feeds :(');
        } else if (data['AddedFeed']) {
          // TODO sorting
          domain.realFeeds.push(data['AddedFeed']);
          domain.reloadFeedInfo();
          ui.displayFeeds();
          ui.closeFeedPopup();
        } else {
          $('#multifeedOptions').empty();
          $('#addFeedUrl').val(data['DiscoveredFeeds'][0].Uri);
          $.each(data['DiscoveredFeeds'], function(i, feed) {
            $('#multifeedOptions')
              .append($('<option></option>')
                .attr('value', feed.Uri)
                .text(feed.Title));
          });
          $('#multifeed').show();
        }
      }
    })
  },

  markRead: function(feed, article) {
    article.IsRead = true;
    domain.getSubscription(article.Feed.Id).ReadArticles.push(article.Id);
    $.ajax('/Feeds/MarkRead', {
      dataType: 'json',
      data: {
        feedId: feed.Id,
        articleId: article.Id
      }
    });

    // 'article.Feed' is always the unique 'natural' feed that we got the
    // article from, whereas 'feed' might be all feeds, or a label...
    ui.updateFeedDisplay(article.Feed);

    // Also update all autogenerated stuff, since that should be quick
    // for small numbers of feeds and we aren't currently sure what
    // autogenerated feeds contain this article.
    for (var i = 0; i < domain.feeds.length; i++) {
      var f = domain.feeds[i];
      if (f.Autogenerated) {
        ui.updateFeedDisplay(f);
      }
    }

    ui.updateTitle(domain.currentFeed);
  },

  /********** Misc ************/
  showingArticle: function(feed, article) {
    domain.currentArticle = article;
    if (!article.IsRead) {
      domain.markRead(feed, article);
    } 
  },
  
  initialize: function() {

    // Every 5 minutes
    window.setInterval(domain.refreshUser, 5 * 60 * 1000);
  }
};

var ui = {
  closeFeedPopup: function() {
    $('#addFeedWindow').dialog('close');
  },

  template: function(name, data) {
    var templ = $('script#' + name);
    if (!templ) {
      console.log('template ' + name + ' not found!');
      return 'TEMPLATE ' + name + ' NOT FOUND';
    }

    // Have to trim template text in order not to give jquery a hissy fit.
    return _.template(templ.text(), data)
      .replace(/^\s+/g, '')
      .replace(/\s+$/g, '');
  },

  resizeMainPanel: function() {
    $('#mainPanel').height($(window).height() - $('#headerBar').height());
    $('#mainPanel').width($(window).width());
  },

  updateUserInfos: function() {
    $('#userName').text(user.Email);
  },

  showUpdateFeedWindow: function(feedId) {
    var feed = domain.getFeed(feedId);
    var sub = domain.getSubscription(feedId);
    $('#modFeedUrl').val(feed.Uri);
    $('#modFeedTitle').val(feed.Title);
    $('#modFeedInterval').val((sub.CheckInterval / 60) | 0);
    $('#modifyFeedWindow').dialog({
      height: 'auto',
      width: 'auto',
      buttons: [
        {
          text: 'Save',
          click: function() {
            var title = $('#modFeedTitle').val();
            var checkInterval = $('#modFeedInterval').val();
            $.ajax('/Feeds/Update', {
              data: {
                id: feedId,
                title: title,
                checkIntervalSeconds: checkInterval * 60
              },
              success: function(res, foo, bar) {
                feed = domain.getFeed(feedId);
                sub = domain.getSubscription(feedId);
                sub.Title = res.Subscription.Title;
                sub.CheckInterval = res.Subscription.CheckInterval.TotalSeconds;
                feed.ReadInterval = res.Feed.ReadInterval.TotalSeconds;
                if (sub.Title) feed.Title = sub.Title;
                $('#modifyFeedWindow').dialog('close');
                ui.displayFeeds();
              }
            });
          }
        },
        {
          text: 'Unsubscribe',
          click: function() {
            var reallyUnsubscribe = confirm(
                'Are you sure you want to unsubscribe from ' + feed.Title + '?');
            if (reallyUnsubscribe) {
              $.ajax('/Feeds/Unsubscribe', {
                data: { id: feedId },
                success: function() {
                  alert('Successfully unsubscribed.');
                  $('#modifyFeedWindow').dialog('close');
                  domain.removeFeed(feedId);
                }
              });
            } else {
              $('#modifyFeedWindow').dialog('close');
            }
          }
        },
        {
          text: 'Refresh',
          click: function() {
            $.ajax('/Feeds/RefreshNow', {
              data: {
                id: feedId
              },
              success: function(data, a, b) {
                domain.updateFeed(data);
              }
            })
            $('#modifyFeedWindow').dialog('close');
          }
        },
      ]
    });
  },

  showLoginWindow: function() {
    $('#loginWindow').dialog({
      height: 'auto',
      width: 'auto',
      buttons: [
        {
          text: 'Log in',
          click: function() {
            $.ajax('/Users/Login', {
              dataType: 'json',
              data: {
                'email': $('#email').val(),
                'password': $('#password').val(),
              },
              success: function(data, statusText, xhr) {
                ui.hideLoginWindow();
                user = data;
                ui.updateUserInfos();
                domain.refreshFeeds();
              }
            });
          }
        },
        {
          text: 'Register',
          click: function() {
            $.ajax('/Users/Register', {
              dataType: 'json',
              data: {
                'email': $('#email').val(),
                'password': $('#password').val(),
              },
              success: function(data, statusText, xhr) {
                ui.hideLoginWindow();
                user = data;
                ui.updateUserInfos();
                domain.refreshFeeds();
              }
            });
          }
        },
      ]
    });
  },

  hideLoginWindow: function() {
    $('#loginWindow').dialog('close');
  },

  displayFeeds: function() {
    $('.feedList .content').html(ui.template('feedlistTemplate', {feeds: domain.feeds}));
    ui.updateTitle();
  },

  updateFeedDisplay: function(feed) {
    $('#feedli_' + feed.Id).replaceWith(ui.template('feedli', {feed: feed}));
  },

  showingUnreadOnly: false,
  currentFeed: null,

  showFeed: function(feedId) {
    var feed = domain.getFeed(feedId);
    if (!feed) return;
    ui.currentFeed = feed;
    $('.listRow').removeClass('selectedItem');
    $('#listRow_' + feedId).addClass('selectedItem');
    $('#articleList .content').empty();
    $.each(feed.Articles, function(i, article) {
      if (ui.showingUnreadOnly && article.IsRead) {
        return;
      }
      var dom = ui.template('articleli', {
        article: article,
          feed: article.Feed,
          readClass: article.IsRead ? 'read' : 'unread'
      });
      $('#articleList .content').append(dom);
    });
    ui.updateTitle();
  },

  showArticle: function(feedId, artId) {
    var feed = domain.getFeed(feedId);
    // TODO error message?
    if (!feed) {
      console.log('feed ' + feedId + ' not found');
      return;
    }
    var article = domain.getArticle(feed, artId);
    if (!article) {
      console.log('feed ' + feedId + ' has no article ' + artId);
      return;
    }
    $('.articleli').removeClass('selectedItem');
    var artDiv = $('#' + util.articleId(feed, article));
    artDiv.addClass('selectedItem');
    artDiv.removeClass('unread');
    artDiv.addClass('read');
    $('#articleView .content').html(ui.template('articlefull', {
      feed: article.Feed,
      article: article
    }));

    domain.showingArticle(feed, article);
    ui.updateTitle();
  },

  toggleUnreadOnly: function() {
    if (ui.showingUnreadOnly) {
      ui.showingUnreadOnly = false;
      $('#toggleUnread').text('Unread');
    } else {
      ui.showingUnreadOnly = true;
      $('#toggleUnread').text('All');
    }
    ui.showFeed(ui.currentFeed.Id);
  },

  initialize: function() {
    ui.resizeMainPanel();
    $(window).resize(ui.resizeMainPanel);
    // This is currently using the jquery ui layout plugin.
    // I have some annoyances with it. Consider switching to something better,
    // or at least simpler, like http://www.methvin.com/splitter/
    bodyLayout = $('#mainPanel').layout({
      defaults: {
        applyDefaultStyles: true,
        resizable: true,
        closable: false,
        slidable: true,
        contentSelector: '.content',
        spacing_open: 4,
        spacing_closed: 4
      },
      south: {
        paneSelector: '.articleView',
        size: 400,
      },
      west: {
        paneSelector: '.feedList'
      },
      center: {
        paneSelector: '.articleList'
      },
    });

    $('#addFeedButton').click(function() {
      $('#multifeed').hide();
      $('#addFeedWindow').dialog({
          height: 'auto',
          width: 'auto',
          buttons: [
              { text: 'Add feed!', click: domain.addFeed },
              { text: 'Maybe later', click: function() { $(this).dialog('close'); } }
          ]
      });
    });
    $('#multifeedOptions').change(function() {
      $('#addFeedUrl').val($('#multifeedOptions').val());
    });
  },

  fmtDate: function(date) {
    return date.toISOString().replace('T', ' ').substring(0, 16);
  },

  authors: function(article) {
    function formatAuthor(author) {
      return ui.template('authorLink', { author: author });
    }
    if (!article.Authors) {
      if (!feed.Authors) {
        return '';
      }
      return util.commaAnd(feed.Authors, formatAuthor);
    }
    return util.commaAnd(article.Authors, formatAuthor);
  },

  updateTitle: function() {
    if (ui.currentFeed) {
      ui.currentFeed = domain.getFeed(ui.currentFeed.Id);
      var unread = domain.unreadCount(ui.currentFeed);
      if (unread) {
        window.document.title =
          ui.currentFeed.Title + ' (' + unread + ') - Pierce RSS Reader';
      } else {
        window.document.title = ui.currentFeed.Title + ' - Pierce RSS Reader';
      }
    } else {
      window.document.title = 'Pierce RSS Reader';
    }
  },

  // this is so everything can end with a comma
  _barrier: null
};

var util = {
  hashString: function(str) {
    if (str == null) return 0;
    var hash = 0;
    for (var i = 0; i < str.length; i++) {
      hash = ((hash << 5) - hash) + str.charCodeAt(i);
      hash = hash & hash;
    }
    return Math.abs(hash);
  },

  commaAnd: function(list, fmt) {
    if (list.length == 0) return '';
    if (list.length == 1) {
      return fmt(list[0]);
    }
    if (list.length == 2) {
      return fmt(list[0]) + ' and ' + fmt(list[1]);
    }
    var str = fmt(list[0]);
    for (var i = 1; i < list.length - 1; i++) {
      str += ', ';
      str += fmt(list[i]);
    }
    str += ', and ' + fmt(list[list.length - 1]);
    return str;
  },

  articleId: function(feed, article) {
    return 'articleli_' + feed.Id + '_' + article.Id.replace('-', '');
  },

  jsDate: function(aspNetDate) {
    return new Date(parseInt(aspNetDate.substr(6)));
  },

  sortArticles: function(articles) {
    articles.sort(function(a, b) {
      return b.PublishDate.getTime() - a.PublishDate.getTime();
    })
  },

  sortFeeds: function() {
    domain.feeds.sort(function(a, b) {
      return a.Title.localeCompare(b.Title);
    });
  },

  // this is so everything can end with a comma
  _barrier: null
};



$(document).ready(function() {
  ui.initialize();
  domain.initialize();

  // TODO should be something else, no?
  if ($.cookie('.MONOAUTH')) {
    domain.refreshUser();
  } else {
    ui.showLoginWindow();
  }
});
